{"version":3,"sources":["horas.js","ponentes.js","tags.js"],"names":["document","querySelector","busqueda","categoria_id","dia","categoria","dias","querySelectorAll","inputHiddenDia","inputHiddenHora","terminoBusqueda","e","target","name","value","horaPrevia","classList","remove","Object","values","includes","async","url","resultado","fetch","eventos","listadoHoras","forEach","li","add","horasTomadas","map","evento","hora_id","Array","from","filter","dataset","horaId","console","log","hora","addEventListener","seleccionarHora","removeEventListener","obtenerHorasDisponibles","json","buscarEventos","ponentes","respuesta","arrayPonentes","ponente","nombre","trim","apellido","id","formatearPonentes","obtenerPonentes","tagsInput","tagsDiv","tagsInputHidden","tags","mostrarTags","textContent","tag","etiqueta","createElement","ondblclick","eliminarTag","appendChild","actualizarInputHidden","toString","split","keyCode","preventDefault","length","needle","iguales","toLowerCase","repeatedTag"],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){\r\n    const horas = document.querySelector('#horas');\r\n\r\n    if(horas) {\r\n\r\n        let busqueda = {\r\n            categoria_id: '',\r\n            dia: ''\r\n        }\r\n\r\n        const categoria = document.querySelector('[name=\"categoria_id\"]');\r\n        const dias = document.querySelectorAll('[name=\"dia\"]');\r\n        const inputHiddenDia = document.querySelector('[name=\"dia_id\"]');\r\n        const inputHiddenHora = document.querySelector('[name=\"hora_id\"]');\r\n        \r\n        categoria.addEventListener('change', terminoBusqueda);\r\n        dias.forEach(dia => dia.addEventListener('change', terminoBusqueda));\r\n\r\n        function terminoBusqueda(e) {\r\n            busqueda[e.target.name] = e.target.value;\r\n            \r\n            // Deshabilitar la hora previa\r\n            const horaPrevia = document.querySelector('.horas__hora--seleccionada');\r\n            if(horaPrevia){\r\n                horaPrevia.classList.remove('horas__hora--seleccionada');\r\n            }     \r\n\r\n            // Reiniciar los campos ocultos y el selector de horas\r\n            inputHiddenHora.value = '';\r\n            inputHiddenDia.value = '';\r\n\r\n            if(Object.values(busqueda).includes('')){\r\n                return;\r\n            }\r\n            \r\n            buscarEventos();\r\n        }\r\n\r\n        async function buscarEventos(){\r\n            const { dia, categoria_id } = busqueda\r\n\r\n            const url = `/api/eventos-horario?dia_id=${dia}&categoria_id=${categoria_id}`;\r\n            const resultado = await fetch(url);\r\n            const eventos = await resultado.json();\r\n            obtenerHorasDisponibles(eventos);\r\n        }\r\n\r\n        function obtenerHorasDisponibles(eventos){\r\n            // Reiniciar las horas\r\n            const listadoHoras = document.querySelectorAll('#horas li');\r\n            listadoHoras.forEach(li => li.classList.add('horas__hora--deshabilitada'))\r\n\r\n            // Comprobar eventos ya tomados y quitar la clase de deshabilitado\r\n            const horasTomadas = eventos.map( evento => evento.hora_id);\r\n\r\n            // Convertir el NodeList a Array e iterar\r\n            const listadoHorasArray = Array.from(listadoHoras);\r\n\r\n            // Filtrar arreglo y obtener uno nuevo con las horas disponibles\r\n            const resultado = listadoHorasArray.filter( li => !horasTomadas.includes(li.dataset.horaId) );\r\n            console.log(resultado);\r\n\r\n            // Quitarle la clase de deshabilitado\r\n            resultado.forEach(li => {\r\n                li.classList.remove('horas__hora--deshabilitada');\r\n            });\r\n\r\n            // Asignar evento a las horas disponibles \r\n            const horasDisponibles = document.querySelectorAll('#horas li:not(.horas__hora--deshabilitada)');\r\n            horasDisponibles.forEach( hora => hora.addEventListener('click', seleccionarHora));\r\n            \r\n            // Quitar los eventListener para aquellos input que tenian horasDeshabilitadas\r\n            const horasDeshabilitadas = document.querySelectorAll('.horas__hora--deshabilitada');\r\n            horasDeshabilitadas.forEach(hora => hora.removeEventListener('click', seleccionarHora));\r\n        }\r\n\r\n        function seleccionarHora(e){\r\n\r\n            // Deshabilitar la hora previa si hay un nuevo click\r\n            const horaPrevia = document.querySelector('.horas__hora--seleccionada');\r\n            if(horaPrevia){\r\n                horaPrevia.classList.remove('horas__hora--seleccionada');\r\n            }     \r\n\r\n            // Agregar clase de seleccionado\r\n            e.target.classList.add('horas__hora--seleccionada');\r\n\r\n            inputHiddenHora.value = e.target.dataset.horaId;\r\n\r\n            // Llenar el campo oculto de dia\r\n            inputHiddenDia.value = document.querySelector('[name=\"dia\"]:checked').value\r\n        }\r\n    }    \r\n})();","(function(){\r\n    const ponentesInput = document.querySelector('#ponentes');\r\n\r\n    if(ponentesInput){\r\n        let ponentes = [];\r\n        let ponentesFiltrados = [];\r\n\r\n        obtenerPonentes();\r\n\r\n        async function obtenerPonentes(){\r\n            const url = `/api/ponentes`;\r\n            const respuesta = await fetch(url);\r\n            const resultado = await respuesta.json();\r\n            \r\n            formatearPonentes(resultado);\r\n        }\r\n\r\n        function formatearPonentes(arrayPonentes = []) {\r\n            ponentes = arrayPonentes.map( ponente => {\r\n                return {\r\n                    nombre: `${ponente.nombre.trim()} ${ponente.apellido.trim()}`,\r\n                    id: ponente.id\r\n                }\r\n            });\r\n            console.log(ponentes);\r\n        }\r\n    }\r\n\r\n})();","(function() {\r\n    const tagsInput = document.querySelector('#tags_input');\r\n\r\n    if(tagsInput) {\r\n\r\n        const tagsDiv = document.querySelector('#tags');\r\n        const tagsInputHidden = document.querySelector('[name=\"tags\"]');\r\n\r\n        // Array que contendrá los tags y se actualizará según las acciones del usuario\r\n        let tags = [];\r\n\r\n        // Recuperar del input oculto\r\n        if(tagsInputHidden.value !== '') {\r\n            tags = tagsInputHidden.value.split(',');\r\n            mostrarTags();\r\n        }\r\n\r\n\r\n        // Escuchar los cambios en el input\r\n        tagsInput.addEventListener('keypress', guardarTag);\r\n\r\n        function guardarTag(e) {\r\n            // Si el keyCode es el de \",\"\r\n            if(e.keyCode === 44){\r\n\r\n                // Previene que aparezca la \",\" al ingresar un nuevo tag\r\n                e.preventDefault();\r\n                \r\n                // Evita que se ingrese un valor vacio o repetido al Array de tags\r\n                if(e.target.value.trim() === '' || e.target.value.length < 1 || repeatedTag(e.target.value)){\r\n\r\n                    e.target.value = '';\r\n                    return\r\n                }\r\n\r\n                // Actualiza el Array con lo nuevo\r\n                tags = [...tags, e.target.value.trim()]       \r\n                tagsInput.value = '';\r\n\r\n                mostrarTags();\r\n            }\r\n        }\r\n\r\n        function mostrarTags() {\r\n            tagsDiv.textContent = '';\r\n\r\n            tags.forEach(tag => {\r\n                const etiqueta = document.createElement('LI');\r\n                etiqueta.classList.add('formulario__tag');\r\n                etiqueta.textContent = tag;\r\n                etiqueta.ondblclick = eliminarTag;\r\n                tagsDiv.appendChild(etiqueta);\r\n            });\r\n\r\n            actualizarInputHidden();\r\n        }\r\n\r\n        function eliminarTag(e) {\r\n            e.target.remove();\r\n\r\n            // Actualizar el array tags con lo que se acabó de remover\r\n            tags = tags.filter(tag => tag !== e.target.textContent);\r\n\r\n            actualizarInputHidden();\r\n        }\r\n\r\n        // El input hidden contiene lo que se enviará a la DB\r\n        function actualizarInputHidden() {\r\n            tagsInputHidden.value = tags.toString();\r\n        }\r\n\r\n        function repeatedTag(needle){\r\n            let iguales = false;\r\n            tags.forEach(tag => {\r\n\r\n                // Transformamos ambos a lower case y comparamos si son iguales a los que estan en el arreglo de tags\r\n                if(tag.toLowerCase().trim() === needle.toLowerCase().trim()){\r\n                    iguales = true;\r\n                }\r\n\r\n            });\r\n            return iguales;\r\n        }\r\n    }\r\n})();"]}